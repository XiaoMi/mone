package run.mone.hive.prompt;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import run.mone.hive.common.AiTemplate;

import java.util.HashMap;
import java.util.Map;

/**
 * 技术文档模板生成器
 * 提供标准化的技术文档模板，包括系统架构、模块设计、数据库设计、API设计等内容
 * 
 * @author mone
 * @date 2025/09/22
 */
@Slf4j
public class TechnicalDocTemplate {

    /**
     * 生成技术文档模板
     * 
     * @param projectName 项目名称
     * @param description 项目简介
     * @return 技术文档模板内容
     */
    public static String generateTechnicalDoc(String projectName, String description) {
        Map<String, Object> data = new HashMap<>();
        data.put("projectName", projectName);
        data.put("description", description);
        
        return AiTemplate.renderTemplate(TECHNICAL_DOC_TEMPLATE, data);
    }

    /**
     * 技术文档模板
     * 包含项目概述、系统架构、模块设计、数据库设计、API设计、对象设计等章节
     */
    public static final String TECHNICAL_DOC_TEMPLATE = """
            # ${projectName} 技术设计文档
            
            ## 1. 文档概述
            
            ### 1.1 文档目的
            本文档旨在详细描述${projectName}的技术设计，包括系统架构、模块设计、数据库设计、API设计等内容，为开发团队提供技术参考和指导。
            
            ### 1.2 项目简介
            ${description}
            
            ### 1.3 文档修订历史
            | 版本号 | 修订日期 | 修订人 | 修订内容 |
            | ----- | ------- | ----- | ------- |
            | v1.0  | YYYY-MM-DD | 作者名 | 初始版本 |
            
            ## 2. 系统架构设计
            
            ### 2.1 架构概述
            [在此描述系统的整体架构，可包含架构图]
            
            ### 2.2 技术选型
            | 技术/框架 | 版本 | 用途 |
            | -------- | --- | --- |
            | 技术1    | x.x.x | 用途描述 |
            | 技术2    | x.x.x | 用途描述 |
            
            ### 2.3 部署架构
            [描述系统的部署架构，包括各组件的部署方式、网络拓扑等]
            
            ## 3. 模块设计
            
            ### 3.1 模块划分
            [描述系统的模块划分，可使用图表展示模块之间的关系]
            
            ### 3.2 核心模块详细设计
            
            #### 3.2.1 模块一
            
            **功能职责**：
            [描述该模块的主要功能和职责]
            
            **关键类设计**：
            | 类名 | 职责 | 关键方法/属性 |
            | --- | --- | ----------- |
            | 类名1 | 职责描述 | 方法/属性列表 |
            | 类名2 | 职责描述 | 方法/属性列表 |
            
            **处理流程**：
            [描述该模块的主要处理流程，可使用流程图或时序图]
            
            **设计考量**：
            [描述设计该模块时的考量因素，如性能、可扩展性、安全性等]
            
            #### 3.2.2 模块二
            [按照模块一的格式描述]
            
            ## 4. 数据库设计
            
            ### 4.1 ER图
            [提供数据库的ER图]
            
            ### 4.2 表设计
            
            #### 4.2.1 表名：表1
            
            **表说明**：[描述该表的用途]
            
            **字段设计**：
            | 字段名 | 类型 | 长度 | 允许空 | 默认值 | 主键 | 说明 |
            | ----- | --- | --- | ----- | ----- | --- | --- |
            | id    | int | 11  | 否    | 无    | 是  | 主键ID |
            | name  | varchar | 255 | 否 | 无 | 否 | 名称 |
            | ...   | ... | ... | ... | ... | ... | ... |
            
            **索引设计**：
            | 索引名 | 类型 | 包含字段 | 说明 |
            | ----- | --- | ------- | --- |
            | idx_name | 普通索引 | name | 名称索引 |
            | ...   | ... | ... | ... |
            
            #### 4.2.2 表名：表2
            [按照表1的格式描述]
            
            ## 5. API设计
            
            ### 5.1 接口概述
            [描述系统提供的API接口概况]
            
            ### 5.2 接口详细设计
            
            #### 5.2.1 接口名称：接口1
            
            **接口描述**：[描述该接口的功能]
            
            **请求方式**：GET/POST/PUT/DELETE
            
            **请求URL**：`/api/path`
            
            **请求参数**：
            | 参数名 | 类型 | 必填 | 说明 |
            | ----- | --- | --- | --- |
            | param1 | String | 是 | 参数1说明 |
            | param2 | Integer | 否 | 参数2说明 |
            
            **响应参数**：
            | 参数名 | 类型 | 说明 |
            | ----- | --- | --- |
            | code | Integer | 状态码 |
            | message | String | 状态信息 |
            | data | Object | 响应数据 |
            
            **响应示例**：
            ```json
            {
              "code": 200,
              "message": "成功",
              "data": {
                "id": 1,
                "name": "示例"
              }
            }
            ```
            
            #### 5.2.2 接口名称：接口2
            [按照接口1的格式描述]
            
            ## 6. 对象设计
            
            ### 6.1 领域模型
            [描述系统的领域模型，可使用UML类图]
            
            ### 6.2 核心对象详细设计
            
            #### 6.2.1 对象名称：对象1
            
            **对象职责**：[描述该对象的职责]
            
            **属性列表**：
            | 属性名 | 类型 | 说明 |
            | ----- | --- | --- |
            | 属性1 | 类型1 | 说明1 |
            | 属性2 | 类型2 | 说明2 |
            
            **方法列表**：
            | 方法名 | 参数 | 返回值 | 说明 |
            | ----- | --- | ----- | --- |
            | 方法1 | 参数列表 | 返回类型 | 方法说明 |
            | 方法2 | 参数列表 | 返回类型 | 方法说明 |
            
            **与其他对象的关系**：
            [描述该对象与其他对象的关系]
            
            #### 6.2.2 对象名称：对象2
            [按照对象1的格式描述]
            
            ## 7. 关键流程设计
            
            ### 7.1 流程名称：流程1
            
            **流程说明**：[描述该流程的功能和目的]
            
            **流程图**：
            [提供流程图]
            
            **关键步骤说明**：
            1. 步骤1：[步骤1的详细说明]
            2. 步骤2：[步骤2的详细说明]
            3. ...
            
            **异常处理**：
            [描述流程中可能出现的异常情况及处理方式]
            
            ### 7.2 流程名称：流程2
            [按照流程1的格式描述]
            
            ## 8. 安全设计
            
            ### 8.1 认证与授权
            [描述系统的认证与授权机制]
            
            ### 8.2 数据安全
            [描述系统的数据安全措施]
            
            ### 8.3 传输安全
            [描述系统的传输安全措施]
            
            ## 9. 性能设计
            
            ### 9.1 性能指标
            [描述系统的性能指标要求]
            
            ### 9.2 性能优化措施
            [描述系统采取的性能优化措施]
            
            ## 10. 扩展性设计
            
            ### 10.1 扩展点
            [描述系统的扩展点设计]
            
            ### 10.2 扩展机制
            [描述系统的扩展机制]
            
            ## 11. 附录
            
            ### 11.1 术语表
            | 术语 | 解释 |
            | --- | --- |
            | 术语1 | 解释1 |
            | 术语2 | 解释2 |
            
            ### 11.2 参考资料
            [列出参考的资料、文档等]
            """;
    
    /**
     * 数据库表设计模板
     * 用于生成标准化的数据库表设计文档
     */
    public static final String DB_TABLE_TEMPLATE = """
            ## 表名：${tableName}
            
            **表说明**：${tableDescription}
            
            **字段设计**：
            | 字段名 | 类型 | 长度 | 允许空 | 默认值 | 主键 | 说明 |
            | ----- | --- | --- | ----- | ----- | --- | --- |
            ${fields}
            
            **索引设计**：
            | 索引名 | 类型 | 包含字段 | 说明 |
            | ----- | --- | ------- | --- |
            ${indexes}
            """;
    
    /**
     * API接口设计模板
     * 用于生成标准化的API接口设计文档
     */
    public static final String API_TEMPLATE = """
            ## 接口名称：${apiName}
            
            **接口描述**：${apiDescription}
            
            **请求方式**：${requestMethod}
            
            **请求URL**：`${requestUrl}`
            
            **请求参数**：
            | 参数名 | 类型 | 必填 | 说明 |
            | ----- | --- | --- | --- |
            ${requestParams}
            
            **响应参数**：
            | 参数名 | 类型 | 说明 |
            | ----- | --- | --- |
            ${responseParams}
            
            **响应示例**：
            ```json
            ${responseExample}
            ```
            """;
    
    /**
     * 对象设计模板
     * 用于生成标准化的对象设计文档
     */
    public static final String OBJECT_TEMPLATE = """
            ## 对象名称：${objectName}
            
            **对象职责**：${objectDescription}
            
            **属性列表**：
            | 属性名 | 类型 | 说明 |
            | ----- | --- | --- |
            ${properties}
            
            **方法列表**：
            | 方法名 | 参数 | 返回值 | 说明 |
            | ----- | --- | ----- | --- |
            ${methods}
            
            **与其他对象的关系**：
            ${relationships}
            """;
}
