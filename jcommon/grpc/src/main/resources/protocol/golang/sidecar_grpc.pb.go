// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: sidecar.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SideCarServiceClient is the client API for SideCarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SideCarServiceClient interface {
	Call(ctx context.Context, in *SideCarRequest, opts ...grpc.CallOption) (*SideCarResponse, error)
	Listen(ctx context.Context, opts ...grpc.CallOption) (SideCarService_ListenClient, error)
}

type sideCarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSideCarServiceClient(cc grpc.ClientConnInterface) SideCarServiceClient {
	return &sideCarServiceClient{cc}
}

func (c *sideCarServiceClient) Call(ctx context.Context, in *SideCarRequest, opts ...grpc.CallOption) (*SideCarResponse, error) {
	out := new(SideCarResponse)
	err := c.cc.Invoke(ctx, "/run.mone.mesh.bo.SideCarService/call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sideCarServiceClient) Listen(ctx context.Context, opts ...grpc.CallOption) (SideCarService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &SideCarService_ServiceDesc.Streams[0], "/run.mone.mesh.bo.SideCarService/listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &sideCarServiceListenClient{stream}
	return x, nil
}

type SideCarService_ListenClient interface {
	Send(*SideCarRequest) error
	Recv() (*SideCarPushMsg, error)
	grpc.ClientStream
}

type sideCarServiceListenClient struct {
	grpc.ClientStream
}

func (x *sideCarServiceListenClient) Send(m *SideCarRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sideCarServiceListenClient) Recv() (*SideCarPushMsg, error) {
	m := new(SideCarPushMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SideCarServiceServer is the server API for SideCarService service.
// All implementations must embed UnimplementedSideCarServiceServer
// for forward compatibility
type SideCarServiceServer interface {
	Call(context.Context, *SideCarRequest) (*SideCarResponse, error)
	Listen(SideCarService_ListenServer) error
	mustEmbedUnimplementedSideCarServiceServer()
}

// UnimplementedSideCarServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSideCarServiceServer struct {
}

func (UnimplementedSideCarServiceServer) Call(context.Context, *SideCarRequest) (*SideCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedSideCarServiceServer) Listen(SideCarService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedSideCarServiceServer) mustEmbedUnimplementedSideCarServiceServer() {}

// UnsafeSideCarServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SideCarServiceServer will
// result in compilation errors.
type UnsafeSideCarServiceServer interface {
	mustEmbedUnimplementedSideCarServiceServer()
}

func RegisterSideCarServiceServer(s grpc.ServiceRegistrar, srv SideCarServiceServer) {
	s.RegisterService(&SideCarService_ServiceDesc, srv)
}

func _SideCarService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SideCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SideCarServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/run.mone.mesh.bo.SideCarService/call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SideCarServiceServer).Call(ctx, req.(*SideCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SideCarService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SideCarServiceServer).Listen(&sideCarServiceListenServer{stream})
}

type SideCarService_ListenServer interface {
	Send(*SideCarPushMsg) error
	Recv() (*SideCarRequest, error)
	grpc.ServerStream
}

type sideCarServiceListenServer struct {
	grpc.ServerStream
}

func (x *sideCarServiceListenServer) Send(m *SideCarPushMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sideCarServiceListenServer) Recv() (*SideCarRequest, error) {
	m := new(SideCarRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SideCarService_ServiceDesc is the grpc.ServiceDesc for SideCarService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SideCarService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "run.mone.mesh.bo.SideCarService",
	HandlerType: (*SideCarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "call",
			Handler:    _SideCarService_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listen",
			Handler:       _SideCarService_Listen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "sidecar.proto",
}
