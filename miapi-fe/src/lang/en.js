export default {
  uptateTime: 'Update time',
  lowUptateTime: 'update time',
  mavenDependencies: "maven dependencies",
  importPdf: "Export PDF",
  export: "export",
  url: 'url',
  belong: 'belong',
  name: 'name',
  creator: 'creator',
  project: 'project',
  titleProject: 'Project',
  please: 'Please',
  enter: 'enter',
  close:"disabled",
  open:"enabled",
  grouping: 'Grouping',
  clique: 'group',
  nameSpace: 'nameSpace',
  intranet: 'Intranet',
  version: 'version',
  authority: 'authority',
  description: 'description',
  groupAll: 'Group all',
  projectGrouping: 'Project grouping',
  edit: 'edit',
  delete: 'delete',
  prompt: 'prompt',
  myProject: 'My project',
  successDeleted: 'successfully deleted!',
  successfullyModified: 'Successfully modified',
  undelete: 'Undelete!',
  updatedOn: 'Updated on',
  unfavorite: 'Unfavorite!',
  collectionSuccess: 'Collection success!',
  haveAltogether: 'have altogether',
  projectItems: 'items',
  newProject: 'New Project',
  IManage: 'I manage',
  noData: 'No data',
  myFavorite: 'My favorite',
  editSuccessfully: 'Edit successfully!',
  addedSuccessfully: 'Added successfully!',
  successfulApplication: "Successful application!",
  newProjectGroup: 'New project group',
  editProjectGroup: 'Edit project group',
  recentVisit: 'Recent visit',
  recentlyViewed: 'Recently Viewed',
  nickName: 'Nick name',
  added: 'added',
  notAdded: 'Not added',
  account: 'Account',
  password: 'Password',
  email: 'Email',
  role: 'Role',
  finish: 'Finish',
  first: 'First',
  two: 'Two',
  three: 'Three',
  requestParameter: 'Request parameter',
  returnParameter: 'Return parameter',
  instructionManual: 'instruction manual',
  serviceAddress: 'Service address',
  load: 'load',
  selectAllMethod: 'Select all',
  interfaceName: 'Interface name',
  interfaceDescription: 'Interface Description',
  serviceVersion: 'Service version',
  resetNum: 'Retry(bout)',
  serviceGrouping: 'Service grouping',
  serviceDescription: 'Service description',
  asynchronousCall: 'Asynchronous call',
  dataSynchronization: 'data synchronization',
  fullCoverage: 'Full coverage',
  normalMode: 'Normal mode',
  savedSuccessfully: 'Saved successfully',
  updateCompleted: 'update completed',
  loadGateway: 'Load gateway',
  expm: 'E.g',
  appName: 'Application Name',
  routingType: 'Routing type',
  path: 'path',
  overtimeTime: 'overtime time',
  groupSearchAPI: 'Search API by name/path',
  newCategory: 'New category',
  newCollection: 'New collection',
  editGroup: 'Edit group',
  deleteGroup: 'Delete group',
  importAPI: 'Import API',
  newAPI: 'New API',
  emptyRecycle: 'Empty the recycle bin',
  deleteAPI: 'Delete API',
  copyAPI: 'Copy API',
  removeCollection: 'Remove from collection',
  title: 'title',
  content: 'text',
  collectionDocument: 'document',
  expectedName: 'name',
  responseContent: 'response',
  submittedSuccessfully: 'Submitted successfully',
  parameter: 'parameter',
  copy: 'copy',
  formEntry: 'From',
  jsonEntry: 'JSON',
  addTo: 'Add to',
  addSubdata: 'Add subdata',
  details: 'details',
  test: 'testing',
  catalog: 'catalog',
  yes: 'yes',
  no: 'no',
  noDescription: 'No description',
  noAddress: 'No address',
  label: 'Label',
  importJson: 'Import',
  importData: 'Bulk add',
  bulkLoad: 'Bulk load',
  mockAddress: 'MOCK address',
  customMock: 'Custom MOCK',
  customize: 'customize',
  lastUpdater: 'developer',
  updater: 'updater',
  lastUpdateTime: 'Last update time',
  previewMoackExpectations: 'Preview Moack API expectations',
  environmentName: 'Environment name',
  environmentalDomainName: 'Environmental domain name',
  loading: 'loading',
  uploading: 'uploading',
  shareCollection: 'Share API collection',
  collectionName: 'Collection name',
  collectionDescription: 'Collection description',
  ouch: 'Ouch!',
  apiCollectionList: 'API collection list',
  items: 'item(s)',
  projectSummary: 'Project summary',
  summaryBasicInformation: 'Basic information',
  environmentConfiguration: 'Environment configuration',
  projectDynamics: 'Project dynamics',
  memberManagement: 'Member management',
  dataImport: 'Data import',
  projectDocumentation: 'Project documentation',
  projectName: 'project name',
  belongingGroup: 'group',
  projectPermissions: 'Project permissions',
  projectDescription: 'project description',
  dangerousOperation: 'Dangerous operation',
  deleteItem: 'Delete item',
  environmentList: 'Environment list',
  environment: 'Env',
  newEnvironment: 'new environment',
  randomData: "Random data",
  importMethod: 'Import method',
  syncSettings: 'Sync settings',
  dataUpload: 'Data upload',
  importedSuccessfully: 'Imported successfully',
  addDocument: 'Add document',
  documentType: 'type',
  richText: 'Rich text',
  backList: 'Back to list',
  undone: 'undone',
  completed: 'completed',
  deprecated: 'Deprecated',
  administrator: 'administrator',
  collaborationAdministrator: 'Collaboration Administrator',
  ordinaryMember: 'Ordinary member',
  member: 'member',
  visitor: 'Visitor',
  sharedPermissions: 'Shared',
  privatePermissions: 'Private',
  personalCenter: 'Personal center',
  signOut: 'sign out',
  noName: '',
  apiAddedSuccessfully: 'API added successfully',
  changeLog: 'History',
  now: 'Now',
  versionDifference: 'Version difference',
  difference: 'difference',
  latestVersion: 'The latest version ',
  DubboType: 'DUBBO TYPE',
  NonDubboType: 'NON-DUBBO TYPE',
  documentTitle: 'Document title',
  China: 'China',
  controllerName: 'Controller name',
  projectRelatedController: 'Project related Controller',
  importFromProject: 'Import from project',
  addManully: 'Manully',
  newMethod: 'New method',
  importDetails: 'Import details',
  importableController: 'Importable Controller',
  importableServices: 'Importable Services',
  importableAPI: 'Importable API',
  importableDubboAPI: 'Importable method name',
  APIClassification: 'Classification',
  genericParameter: 'Generic parameter',
  whetherCarryAttachment: 'Whether to carry attachment',
  chooseAPI: 'Choose API',
  itemName: 'Item name',
  include: 'Include',
  importable: 'importable ',
  selectAll: 'select all',
  extranet: 'Extranet',
  setTheImageSize: 'Set the image size (px)',
  width: 'width',
  height: 'height',
  serviceName: 'Service Name',
  funcName: 'Method Name',
  APIenvironment: 'API environment',
  serviceEnvironment: 'service environment',
  parameterBody: "parameter body",
  useX5Protocol: "Use the x5 protocol",
  interfaceAddress: "interface address",
  copyText: "Click to copy address!",
  testCase: "test case",
  createNewGroup: "New",
  noTestCaseGroup: "No test case group",
  SelectSampleGroup: "Please select a use case group",
  useUustomMock: "Enable custom mock",
  exampleDescription: "Example description",
  mockScript: "Mock script",
  noDirectory: "No directory",
  serviceIP: "Service IP",
  carryTag: "carry tag",
  testCaseConfirm: {
    text1: "Are you sure you want to delete ",
    text2: " ?"
  },
  controllerTable: {
    onlyImportCurrent: 'Only import the current ',
    method: ' method',
    emptyText: 'There is currently no import API',
    hasSelected: '',
    items: ' selected'
  },
  grpcClass: {
    "projectNotConfigured": "Project not configured",
    "projectIsConfigured": "Project is configured"
  },
  detailList: {
    basicInformation: 'Basic Information',
    requestParameter: 'Request parameter',
    returnParameter: 'Return parameter',
    requestExample: 'Request example',
    returnExample: 'Return example',
    instructionManual: 'instruction manual',
    errorCodeExplanation: 'Error code explanation'
  },
  ApiClass: {
    type: 'API type',
    category: 'category',
    name: 'API name',
    path: 'API path',
    parameters: 'API parameters',
    serviceName: 'service name',
    methodName: 'Method name',
    requestName: 'Request method',
    serviceStatus: 'service status',
    apiStatus: 'API status',
    apiDescription: 'API description',
    interfacePath: 'Interface path',
    interfaceStatus: 'Interface status'
  },
  projectItemList: {
    have: 'Have',
    unit: 'API(s)'
  },
  projectList: {
    deleteTip: 'This action will permanently delete the project',
    continue: 'continue'
  },
  placeholder: {
    selectGroup: 'Please select a group',
    enterVersion: 'Please enter the version',
    enterAPIGroup: 'Please enter API group',
    enterDesc: 'Please enter a description',
    enterProjectName: 'Please enter the project name',
    enterGroupName: 'Please enter a group name',
    searchProject: 'Search project or api',
    pleaseChoose: 'please choose',
    pleaseEnter: 'please enter ',
    serviceNotEmpty: 'Service name cannot be empty',
    pleaseEnterParameterName: 'Please enter the parameter name',
    pleaseEnterParameterValue: 'Please enter the parameter value',
    pleaseEnterParameterValueRule: 'Please enter the parameter value rule',
    pleaseSelectStatus: 'Please select API status',
    pleaseSelectCategory: 'Please select the category',
    pleaseEnterInterfaceName: 'Please enter the interface name',
    pleaseSelectInterfaceName: 'Please select an interface name',
    pleaseEnterName: 'Please enter a name',
    pleaseEnterMethodName: 'Please enter the method name',
    pleaseEnterModule: 'Please enter the module',
    pleaseEnterType: 'Please enter the type',
    noDescription: 'No description',
    pleaseEnterPath: 'Please enter the path',
    pleaseChooseType: 'Please choose the type',
    pleaseEnterAppName: 'Please enter the application name',
    pleaseEnterServiceName: 'Please enter the service name',
    pleaseEnterServiceVersion: 'Please enter the service version',
    PleaseFillGroup: 'Please fill in the group',
    pleaseEnterEnvironmentName: 'Please enter the environment name',
    pleaseEnterAddress: 'Please enter the address',
    pleaseSelectMethodName: 'Please select method name',
    testEnvironment: 'test environment',
    searchApiPath: 'Search API by path',
    deleteEnvironment: 'Delete environment',
    pleaseEnterDocumentTitle: 'Please enter the document title',
    pleaseEnterNumberRetries: 'Please enter the number of retries',
    pleaseEnterErrorCode: 'Please enter the error code',
    pleaseEnterWrongInformation: 'Please enter the wrong information',
    pleaseEnterSolution: 'Please enter a solution',
    pleaseEnterWidth: 'Please enter width',
    pleaseEnterHeight: 'Please enter height',
    PleaseEnterPackageName: 'Please enter package name',
    pleaseEnterUseCaseName: "Please enter a use case name"
  },
  btnText: {
    cancel: 'Cancel',
    ok: 'Ok',
    search: 'Search',
    saveReturn: 'Save and return',
    nextStep: 'Next step',
    previous: 'Previous',
    submit: 'Submit',
    confirmSave: 'Confirm save',
    save: 'save',
    saveAs: 'Save as',
    back: 'back',
    preview: 'Preview',
    close: 'Close',
    delete: 'Delete',
    operate: 'Operate',
    newExpectations: 'New expectations',
    copy: 'copy',
    test: 'Test',
    newTestEnvironment: 'New test environment',
    copyAddress: 'Copy address',
    check: 'Check',
    createLink: 'Create link',
    modify: 'Modify',
    confirmDelete: 'Delete',
    addMember: 'Add member',
    submitApi: 'Submit',
    editApi: 'Edit',
    cancelEdit: 'Cancel',
    newApi: 'New API',
    shareCollection: 'Share collection',
    compared: 'Compared',
    manualSync: "synchronous",
    apply: "Apply",
    rollback: "rollback",
  },
  errorMessage: {
    pathError: 'Path cannot contain spaces',
    notSpacesAndCharacters: 'The service name cannot contain spaces and Chinese characters',
    checkError: 'Check error',
    pleaseFilldesiredName: 'Please fill in the desired name',
    errorRequestParameters: 'Incorrect request parameters',
    parameterNameNotRepeated: 'The request parameter name cannot be repeated',
    responseContentFormat: 'Incorrect response content format',
    ResponseContentNameNotRepeated: 'Response content name cannot be repeated',
    serviceNameNotSpacesCharacters: 'The service name cannot contain spaces and Chinese characters',
    selectRequestMethod: 'Please select the request method',
    selectTestEnvironment: 'Please select a test environment',
    requestHeaderSameKey: 'The request header contains the same key',
    queryParameterSameKey: 'Query parameter contains the same key',
    requestBodySameKey: 'The request body contains the same key',
    pleaseGroupName: 'Please fill in the group name',
    parameterError: 'Parameter error',
    projectNameNotMatch: 'Project name does not match',
    fileReadFailed: 'File read failed',
    fileContentFormatIncorrect: 'File content format is incorrect',
    sorryHavePermission: 'Sorry, you do not have permission',
    requestError: 'Request error',
    networkError: 'Network Error',
    jsonFormatWrong: 'Json format is wrong',
    pleaseFillName: 'Please fill in the name',
    pleaseFillUrl: 'Please fill in the URL',
    incorrectRequestHeaderFormat: 'Incorrect request header format',
    incorrectRequestParameterFormat: 'Incorrect request parameter format',
    returnParameterFormatIncorrect: 'The return parameter format is incorrect',
    returnParameterNameNotRepeated: 'The return parameter name cannot be repeated',
    pleaseEnterCommitInformation: 'Please enter the commit information',
    pleaseEnterCorrectRetries: 'Please enter the correct number of retries',
    controllerNameNotEmpty: 'Controller name cannot contain spaces and Chinese characters',
    incorrectFormatImportedData: 'Incorrect format of imported data',
    importAddressEmpty: 'Import address (url) is empty',
    pleaseSelectImportAPI: 'Please select Import API',
    pleaseSelectAnAPI: 'Please select an API',
    mustBeNumber: 'must be a number',
    manualUpdateSucceeded: "Manual update succeeded",
    pleaseEnterServiceAddress: "Please enter service address",
    parameterBodyFormatError: "Parameter body format error",
    pleaseEnterCaseGroupName: "Please enter a use case (group) name",
    X5ProtocolNotEmpty: "Please fill in the X5 agreement information",
    importPdfErrorNum: "Select up to 30 APIs",
  },
  router: {
    apiList: 'List',
    apiCollection: 'Collection',
    apiTest: 'Test',
    projectSummary: 'Summary',
    home: 'Home',
    personalCenter: 'Personal center',
    shareCollection: 'Share collection',
    useDocumentation: 'Platform usage documentation',
    shareDocument: 'Share document',
    browserTips: "It is strongly recommended to use Google Chrome 😊～"
  },
  table: {
    name: 'Name',
    parameterName: 'Parameter name',
    parameterValue: 'Value',
    parameterType: 'Type',
    generationRules: 'Rules',
    required: 'Required',
    instruction: 'instruction',
    versionID: 'Version ID',
    changePerson: 'Modifier',
    changedesc: 'Commit information',
    errorCode: 'error code',
    wrongInformation: 'wrong information',
    solution: 'solution'
  },
  userList: {
    name: 'name',
    role: 'role'
  },
  detailMockTips: {
    first: 'Get call to get the Mock result. The default request parameter is empty (system default). ',
    sec: 'You can set the request parameter and return the result in the Mock API.'
  },
  mockTable: {
    expectedName: 'Name',
    updater: 'Updater',
    lastUpdateTime: 'Last update time',
    preview: 'preview',
    delete: 'delete',
    stop: 'stop',
    enable: 'enable'
  },
  mockWarn: {
    deleteTip: 'This action will permanently delete',
    continue: 'continue'
  },
  deleteGroupTips: {
    first: 'This action will permanently delete the group',
    sec: 'continue'
  },
  apiTest: {
    requestConfiguration: 'Request configuration',
    ipPort: 'IP port',
    parameterList: 'parameter list',
    jsonArray: 'JSON array',
    requestHeader: 'Request header',
    requestBody: 'Request body',
    queryParameters: 'Query parameters',
    X5Permissions: 'X5',
    hidden: 'hidden',
    hideAutomaticallyHeader: 'Hide the automatically generated header',
    content: 'Text',
    returnResult: 'Return result',
    newEnvironment: 'New environment'
  },
  importApi: {
    optional: 'Optional API',
    selected: 'Selected API'
  },
  dynamicList: {
    add: 'Add',
    modify: 'Modify',
    delete: 'Delete',
    other: 'other',
    project: 'project',
    apiGrouping: 'API grouping',
    statusCode: 'status code',
    statusCodeGrouping: 'status code grouping',
    projectEnvironment: 'project environment',
    teamCooperation: 'team cooperation',
    documentGrouping: 'document grouping',
    documentation: 'documentation'
  },
  importInfoDialog: {
    first: 'You have successfully imported ',
    sec: ' interface information.'
  },
  deleteDocument: {
    first: 'This action will permanently delete this document',
    sec: 'continue?'
  },
  breadcrumb: {
    newMockExpectations: 'New Mock API expectations',
    editMockExpectations: "Edit Mock API expectations",
    newApi: 'New API',
    importApi: 'Import API',
    apiTesting: 'API testing',
    newCollectionDocument: 'New collection document'
  },
  versionDiffInfo: {
    desc: 'The difference between the historical version and the latest version is compared.',
    color1: 'Pink:',
    exp1: ' It is the historical version content.',
    color2: 'Light green:',
    exp2: ' The content of the latest version.'
  },
  addProjectDialogTips: 'Anyone can search and view project (group) information / Only project (group) members can search and view project (group) information',
  deleteProjectGroupTip: 'This operation will permanently delete the project group, do you want to continue?',
  basicInformation: 'Information',
  requestData: 'Data',
  loadAddress: 'Load existing service address',
  createNewAPI: 'Create new API',
  createManually: 'Create manually',
  noExistingService: 'No existing service address?',
  definitionTips: 'Whether to display asynchronously according to API definition',
  notImportExistingInterfaces: 'Do not import existing interfaces',
  notImportExistingInterfacesTips: 'Do not retain the old data, completely use the new data, suitable for the interface definition to be completely handed over to the back-end definition',
  notExistSelectCollection: 'The collection does not exist, please select the collection again',
  needDirectionallyDefaultNacosService: 'Fill in when you need to call the ip service directionally, don’t fill in the default call nacos service',
  multipleAddressesWillRandomlySelectOneCall: "Multiple addresses will randomly select one to call",
  operationDeleteApi: 'This operation will permanently delete the API, do you want to continue?',
  operationRemoveCollectionContinue: 'This operation will remove the API from this collection, do you want to continue?',
  successfullyCreatedCategory: 'Successfully created API category',
  successfullyCreateInterfaceCollection: 'Successfully create a new interface collection',
  newApiCategory: 'New API category',
  editApiCategory: 'Edit API category',
  editCollection: 'Edit collection',
  successfullyCreatedSharingLink: 'Successfully created sharing link',
  pageMissing: 'The page is missing',
  notPageInfo: 'Please check whether the URL you entered is correct, or click the button below to return to the homepage.',
  backHomepage: 'homepage',
  notAuthorizedPage: 'The page does not exist or is not authorized to access the page',
  deleteProjectInfo: 'Once the item is deleted, the data cannot be recovered, please operate carefully! Only the administrator has permission to delete items.',
  deleteDialogTitle: 'Are you sure to delete the APP server project?',
  deleteDialogContent: 'Warning: This operation is very dangerous, it will delete all the interfaces under the project and cannot be restored!',
  deleteConfirmOper: 'Please enter the project name to confirm this operation:',
  deleteUser: 'This operation will delete the user, do you want to continue?',
  swaggerImportMethodInfo: `Currently only supports Swagger's json import`,
  randomDataInfo: "Whether random data is automatically generated",
  clickDragUpload: 'Click or drag the file here to upload',
  swaggerImportSupport2: 'Swagger data import (support v2.0)',
  editChangeImgSizeTips: 'Note: After setting the specific size, you cannot change the size by percentage',
  dubboApplyInfo: "The permission will be approved by the admin of this project, and the service can be called within one day after the approval",
  apiTestGatewayEnvOption: {
    "testEnvironmentSupportHttp&Https": "Test environment (support http and https protocols)",
    "testEnvironmentSupportHttp": "Test environment (support http protocol)",
    "testEnvironmentExternalDomainName": "Test environment external domain name",
    "intranetEnvironmentSupportHttpProtocol": "Intranet environment (support http protocol)",
    "intranetEnvironmentSupportHttp&HttpsProtocols": "Intranet environment (support http and https protocols)",
    "onlineEnvironment": "online environment"
  },
  customMockDescription: {
    title1: "Global variable",
    title2: "Instructions",
    method1: "1. First enable this function.",
    method2: "2. Mock script uses JavaScript to modify mockJson variables.",
    exmp1: "Example 1, rewrite mockJson based on request parameters.",
    exmp2: "Example 2, generating highly custom data content.",
    headerDesc: "Requested HTTP headers.",
    paramsDesc: "Request parameters, including all parameters in Body and Query.",
    cookieDesc: "Cookies with request.",
    mockJsonDesc: "Interface-defined response data Mock template.",
    randomDesc: "Mock.Random method, you can add custom placeholders."
  },
  importPdfTips: "Select up to 30 APIs"
}
