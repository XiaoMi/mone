// this project will run in isolation under the agent's classloader
plugins {
  id "otel.shadow-conventions"
}
apply plugin: "otel.java-conventions"

Project instr_project = project
subprojects {
  afterEvaluate { Project subProj ->
    if (subProj.getPlugins().hasPlugin('java')) {
      // Make it so all instrumentation subproject tests can be run with a single command.
      instr_project.tasks.named('test').configure {
        dependsOn(subProj.tasks.test)
      }

      if (subProj.name == 'javaagent') {
        instr_project.dependencies {
          implementation(project(subProj.getPath()))
        }
      }
    }
  }
}

dependencies {
  compileOnly project(':instrumentation-api')
  compileOnly project(':javaagent-api')
  implementation project(':javaagent-tooling')
  implementation project(':javaagent-extension-api')
}

configurations {
  // exclude bootstrap dependencies from shadowJar
  implementation.exclude group: 'org.slf4j'
  implementation.exclude group: 'run.mone', module: 'opentelemetry-api'
}
shadowJar {
  duplicatesStrategy = DuplicatesStrategy.FAIL

  dependencies {
    //These classes are added to bootstrap classloader by javaagent module
    exclude(project(':javaagent-bootstrap'))
    exclude(project(':instrumentation-api'))
    exclude(project(':javaagent-api'))
  }
}

tasks.register("listInstrumentations") {
  group = "Help"
  description = "List all available instrumentation modules"
  doFirst {
    subprojects
      .findAll { it.plugins.hasPlugin("muzzle") }
      .collect { it.path }
      .each { println it }
  }
}