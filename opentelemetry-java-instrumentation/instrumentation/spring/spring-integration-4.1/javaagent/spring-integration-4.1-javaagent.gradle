apply from: "$rootDir/gradle/instrumentation.gradle"

ext {
  // context "leak" here is intentional: spring-integration instrumentation will always override
  // "local" span context with one extracted from the incoming message when it decides to start a
  // CONSUMER span
  failOnContextLeak = false
}

muzzle {
  pass {
    group = "org.springframework.integration"
    module = "spring-integration-core"
    versions = "[4.1.0.RELEASE,)"
    assertInverse = true
  }
}

dependencies {
  implementation project(':instrumentation:spring:spring-integration-4.1:library')

  library 'org.springframework.integration:spring-integration-core:4.1.0.RELEASE'

  testInstrumentation project(':instrumentation:rabbitmq-2.7:javaagent')

  testImplementation project(':instrumentation:spring:spring-integration-4.1:testing')

  testLibrary "org.springframework.boot:spring-boot-starter-test:1.5.22.RELEASE"
  testLibrary "org.springframework.boot:spring-boot-starter:1.5.22.RELEASE"
  testLibrary "org.springframework.cloud:spring-cloud-stream:2.2.1.RELEASE"
  testLibrary "org.springframework.cloud:spring-cloud-stream-binder-rabbit:2.2.1.RELEASE"

  testImplementation "javax.servlet:javax.servlet-api:3.1.0"
}

test {
  filter {
    excludeTestsMatching 'SpringIntegrationAndRabbitTest'
  }
  jvmArgs "-Dotel.instrumentation.rabbitmq.enabled=false"
}
test.finalizedBy(tasks.register("testWithRabbitInstrumentation", Test) {
  filter {
    includeTestsMatching 'SpringIntegrationAndRabbitTest'
  }
  jvmArgs "-Dotel.instrumentation.rabbitmq.enabled=true"
})

tasks.withType(Test).configureEach {
  systemProperty "testLatestDeps", testLatestDeps
}
