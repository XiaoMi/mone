// common gradle file for instrumentation
import io.opentelemetry.instrumentation.gradle.bytebuddy.ByteBuddyPluginConfigurator

apply plugin: 'net.bytebuddy.byte-buddy'
apply plugin: 'otel.shadow-conventions'

ext {
  mavenGroupId = 'io.opentelemetry.javaagent.instrumentation'
  // Shadow is only for testing, not publishing.
  noShadowPublish = true
}

apply plugin: "otel.java-conventions"
if (project.ext.find("skipPublish") != true) {
  apply plugin: "otel.publish-conventions"
}

apply plugin: "otel.instrumentation-conventions"

if (projectDir.name == 'javaagent') {
  apply plugin: 'muzzle'

  archivesBaseName = projectDir.parentFile.name
}

configurations {
  toolingRuntime {
    canBeConsumed = false
    canBeResolved = true
  }

  bootstrapRuntime {
    canBeConsumed = false
    canBeResolved = true
  }
}

afterEvaluate {
  dependencies {
    compileOnly project(':instrumentation-api')
    compileOnly project(':javaagent-api')
    compileOnly project(':javaagent-bootstrap')
    // Apply common dependencies for instrumentation.
    compileOnly(project(':javaagent-extension-api')) {
      // OpenTelemetry SDK is not needed for compilation
      exclude group: 'run.mone', module: 'opentelemetry-sdk'
      exclude group: 'run.mone', module: 'opentelemetry-sdk-metrics'
    }
    compileOnly(project(':javaagent-tooling')) {
      // OpenTelemetry SDK is not needed for compilation
      exclude group: 'run.mone', module: 'opentelemetry-sdk'
      exclude group: 'run.mone', module: 'opentelemetry-sdk-metrics'
    }
    compileOnly "net.bytebuddy:byte-buddy"
    annotationProcessor "com.google.auto.service:auto-service"
    compileOnly "com.google.auto.service:auto-service"
    compileOnly "org.slf4j:slf4j-api"

    testImplementation "run.mone:opentelemetry-api"

    testImplementation project(':testing-common')
    testAnnotationProcessor "net.bytebuddy:byte-buddy"
    testCompileOnly "net.bytebuddy:byte-buddy"

    testImplementation "org.testcontainers:testcontainers"

    toolingRuntime(project(path: ":javaagent-tooling", configuration: 'instrumentationMuzzle'))
    toolingRuntime(project(path: ":javaagent-extension-api", configuration: 'instrumentationMuzzle'))

    bootstrapRuntime(project(path: ":javaagent-bootstrap", configuration: 'instrumentationMuzzle'))
  }

  def pluginName = 'io.opentelemetry.javaagent.tooling.muzzle.collector.MuzzleCodeGenerationPlugin'
  new ByteBuddyPluginConfigurator(project, sourceSets.main, pluginName,
    configurations.toolingRuntime + configurations.runtimeClasspath
  ).configure()
}

configurations {
  testInstrumentation {
    canBeResolved = true
    canBeConsumed = false
  }
}

tasks.named('shadowJar').configure {
  configurations = [project.configurations.runtimeClasspath, project.configurations.testInstrumentation]

  archiveFileName = 'agent-testing.jar'
}

evaluationDependsOn(":testing:agent-for-testing")

// need to run this after evaluate because testSets plugin adds new test tasks
afterEvaluate {
  tasks.withType(Test).configureEach {
    inputs.file(shadowJar.archiveFile)

    jvmArgs "-Dotel.javaagent.debug=true"
    jvmArgs "-javaagent:${project(":testing:agent-for-testing").tasks.shadowJar.archiveFile.get().asFile.absolutePath}"
    jvmArgs "-Dotel.javaagent.experimental.initializer.jar=${shadowJar.archiveFile.get().asFile.absolutePath}"
    jvmArgs "-Dotel.javaagent.testing.additional-library-ignores.enabled=false"
    def failOnContextLeak = findProperty('failOnContextLeak')
    jvmArgs "-Dotel.javaagent.testing.fail-on-context-leak=${failOnContextLeak == null || failOnContextLeak}"
    // prevent sporadic gradle deadlocks, see SafeLogger for more details
    jvmArgs "-Dotel.javaagent.testing.transform-safe-logging.enabled=true"

    dependsOn shadowJar
    dependsOn ":testing:agent-for-testing:shadowJar"

    // We do fine-grained filtering of the classpath of this codebase's sources since Gradle's
    // configurations will include transitive dependencies as well, which tests do often need.
    classpath = classpath.filter {
      // The sources are packaged into the testing jar so we need to make sure to exclude from the test
      // classpath, which automatically inherits them, to ensure our shaded versions are used.
      if (file("$buildDir/resources/main").equals(it) || file("$buildDir/classes/java/main").equals(it)) {
        return false
      }
      // If agent depends on some shared instrumentation module that is not a testing module, it will
      // be packaged into the testing jar so we need to make sure to exclude from the test classpath.
      String libPath = it.absolutePath
      String instrumentationPath = file("${rootDir}/instrumentation/").absolutePath
      if (libPath.startsWith(instrumentationPath) &&
        libPath.endsWith(".jar") &&
        !libPath.substring(instrumentationPath.size()).contains("testing")) {
        return false
      }
      return true
    }
  }
}

configurations.configureEach {
  if (it.name.toLowerCase().endsWith('testruntimeclasspath')) {
    // Added by agent, don't let Gradle bring it in when running tests.
    exclude module: 'javaagent-bootstrap'
  }
}
