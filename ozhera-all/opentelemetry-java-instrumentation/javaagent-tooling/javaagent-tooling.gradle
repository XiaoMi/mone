group = 'io.opentelemetry.javaagent'

apply plugin: "otel.java-conventions"
apply plugin: "otel.publish-conventions"

configurations {
  // classpath used by the instrumentation muzzle plugin
  instrumentationMuzzle {
    canBeConsumed = true
    canBeResolved = false
    extendsFrom implementation
  }
}

dependencies {
  // Only used during compilation by bytebuddy plugin
  compileOnly "com.google.guava:guava"

  implementation project(':javaagent-bootstrap')
  implementation project(':javaagent-extension-api')
  implementation project(':javaagent-api')
  implementation project(':instrumentation-api')

  implementation "run.mone:opentelemetry-api"
  implementation "run.mone:opentelemetry-api-metrics"
  implementation "run.mone:opentelemetry-sdk-metrics"
  implementation "run.mone:opentelemetry-sdk"
  implementation "run.mone:opentelemetry-semconv"
  implementation("io.micrometer:micrometer-registry-prometheus:1.1.7")
  implementation("ch.qos.logback:logback-classic:1.2.3")
  implementation("ch.qos.logback:logback-core:1.2.3")
  implementation "run.mone:nacos-client:1.2.1-mone-v3-SNAPSHOT"
  implementation "run.mone:opentelemetry-sdk-extension-autoconfigure"
  implementation("run.mone:opentelemetry-extension-kotlin")
  implementation "run.mone:opentelemetry-extension-aws"
  implementation "run.mone:opentelemetry-extension-trace-propagators"
  implementation "run.mone:opentelemetry-sdk-extension-resources"

  annotationProcessor "com.google.auto.value:auto-value"


  // Only the logging exporter is included in our slim distribution so we include it here.
  // Other exporters are in javaagent-exporters
  implementation "run.mone:opentelemetry-exporter-logging"
  implementation("com.lmax:disruptor:3.4.2")
  implementation("org.apache.logging.log4j:log4j-core:2.17.0")
  implementation("org.apache.logging.log4j:log4j-api:2.17.0")

  api "net.bytebuddy:byte-buddy"
  implementation "net.bytebuddy:byte-buddy-agent"
  annotationProcessor "com.google.auto.service:auto-service"
  compileOnly "com.google.auto.service:auto-service"
  implementation "org.slf4j:slf4j-api"

  testImplementation project(':testing-common')
  testImplementation "com.google.guava:guava"
  testImplementation "org.assertj:assertj-core"
  testImplementation "org.mockito:mockito-core"
  testImplementation "org.mockito:mockito-junit-jupiter"

  instrumentationMuzzle sourceSets.main.output
}

// Here we only include autoconfigure but don't include OTLP exporters to ensure they are only in
// the full distribution. We need to override the default exporter setting of OTLP as a result.
tasks.withType(Test).configureEach {
  environment "OTEL_TRACES_EXPORTER", "none"
  environment "OTEL_METRICS_EXPORTER", "none"
}
