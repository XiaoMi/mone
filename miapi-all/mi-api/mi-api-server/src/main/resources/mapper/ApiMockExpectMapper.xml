<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiaomi.miapi.mapper.ApiMockExpectMapper">
  <resultMap id="BaseResultMap" type="com.xiaomi.miapi.pojo.ApiMockExpect">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="mock_exp_name" jdbcType="VARCHAR" property="mockExpName" />
    <result column="mock_data_type" jdbcType="INTEGER" property="mockDataType" />
    <result column="params_md5" jdbcType="VARCHAR" property="paramsMd5" />
    <result column="api_id" jdbcType="INTEGER" property="apiId" />
    <result column="is_default" jdbcType="BIT" property="isDefault" />
    <result column="update_user" jdbcType="VARCHAR" property="updateUser" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="enable" jdbcType="BIT" property="enable" />
    <result column="mock_request_param_type" jdbcType="INTEGER" property="mockRequestParamType" />
    <result column="proxy_url" jdbcType="VARCHAR" property="proxyUrl" />
    <result column="use_mock_script" jdbcType="BIT" property="useMockScript" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.xiaomi.miapi.pojo.ApiMockExpect">
    <result column="mock_params" jdbcType="LONGVARCHAR" property="mockParams" />
    <result column="mock_data" jdbcType="LONGVARCHAR" property="mockData" />
    <result column="mock_rule" jdbcType="LONGVARCHAR" property="mockRule" />
    <result column="mock_request_raw" jdbcType="LONGVARCHAR" property="mockRequestRaw" />
    <result column="mock_script" jdbcType="LONGVARCHAR" property="mockScript" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, mock_exp_name, mock_data_type, params_md5, api_id, is_default, update_user, update_time, 
    enable, mock_request_param_type, proxy_url, use_mock_script
  </sql>
  <sql id="Blob_Column_List">
    mock_params, mock_data, mock_rule, mock_request_raw, mock_script
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.xiaomi.miapi.pojo.ApiMockExpectExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from api_mock_exp
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.xiaomi.miapi.pojo.ApiMockExpectExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from api_mock_exp
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from api_mock_exp
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from api_mock_exp
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.xiaomi.miapi.pojo.ApiMockExpectExample">
    delete from api_mock_exp
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.xiaomi.miapi.pojo.ApiMockExpect">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into api_mock_exp (mock_exp_name, mock_data_type, params_md5, 
      api_id, is_default, update_user, 
      update_time, enable, mock_request_param_type, 
      proxy_url, use_mock_script, mock_params, 
      mock_data, mock_rule, mock_request_raw, 
      mock_script)
    values (#{mockExpName,jdbcType=VARCHAR}, #{mockDataType,jdbcType=INTEGER}, #{paramsMd5,jdbcType=VARCHAR}, 
      #{apiId,jdbcType=INTEGER}, #{isDefault,jdbcType=BIT}, #{updateUser,jdbcType=VARCHAR}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{enable,jdbcType=BIT}, #{mockRequestParamType,jdbcType=INTEGER}, 
      #{proxyUrl,jdbcType=VARCHAR}, #{useMockScript,jdbcType=BIT}, #{mockParams,jdbcType=LONGVARCHAR}, 
      #{mockData,jdbcType=LONGVARCHAR}, #{mockRule,jdbcType=LONGVARCHAR}, #{mockRequestRaw,jdbcType=LONGVARCHAR}, 
      #{mockScript,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xiaomi.miapi.pojo.ApiMockExpect">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into api_mock_exp
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="mockExpName != null">
        mock_exp_name,
      </if>
      <if test="mockDataType != null">
        mock_data_type,
      </if>
      <if test="paramsMd5 != null">
        params_md5,
      </if>
      <if test="apiId != null">
        api_id,
      </if>
      <if test="isDefault != null">
        is_default,
      </if>
      <if test="updateUser != null">
        update_user,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="enable != null">
        enable,
      </if>
      <if test="mockRequestParamType != null">
        mock_request_param_type,
      </if>
      <if test="proxyUrl != null">
        proxy_url,
      </if>
      <if test="useMockScript != null">
        use_mock_script,
      </if>
      <if test="mockParams != null">
        mock_params,
      </if>
      <if test="mockData != null">
        mock_data,
      </if>
      <if test="mockRule != null">
        mock_rule,
      </if>
      <if test="mockRequestRaw != null">
        mock_request_raw,
      </if>
      <if test="mockScript != null">
        mock_script,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="mockExpName != null">
        #{mockExpName,jdbcType=VARCHAR},
      </if>
      <if test="mockDataType != null">
        #{mockDataType,jdbcType=INTEGER},
      </if>
      <if test="paramsMd5 != null">
        #{paramsMd5,jdbcType=VARCHAR},
      </if>
      <if test="apiId != null">
        #{apiId,jdbcType=INTEGER},
      </if>
      <if test="isDefault != null">
        #{isDefault,jdbcType=BIT},
      </if>
      <if test="updateUser != null">
        #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="enable != null">
        #{enable,jdbcType=BIT},
      </if>
      <if test="mockRequestParamType != null">
        #{mockRequestParamType,jdbcType=INTEGER},
      </if>
      <if test="proxyUrl != null">
        #{proxyUrl,jdbcType=VARCHAR},
      </if>
      <if test="useMockScript != null">
        #{useMockScript,jdbcType=BIT},
      </if>
      <if test="mockParams != null">
        #{mockParams,jdbcType=LONGVARCHAR},
      </if>
      <if test="mockData != null">
        #{mockData,jdbcType=LONGVARCHAR},
      </if>
      <if test="mockRule != null">
        #{mockRule,jdbcType=LONGVARCHAR},
      </if>
      <if test="mockRequestRaw != null">
        #{mockRequestRaw,jdbcType=LONGVARCHAR},
      </if>
      <if test="mockScript != null">
        #{mockScript,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.xiaomi.miapi.pojo.ApiMockExpectExample" resultType="java.lang.Long">
    select count(*) from api_mock_exp
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update api_mock_exp
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.mockExpName != null">
        mock_exp_name = #{record.mockExpName,jdbcType=VARCHAR},
      </if>
      <if test="record.mockDataType != null">
        mock_data_type = #{record.mockDataType,jdbcType=INTEGER},
      </if>
      <if test="record.paramsMd5 != null">
        params_md5 = #{record.paramsMd5,jdbcType=VARCHAR},
      </if>
      <if test="record.apiId != null">
        api_id = #{record.apiId,jdbcType=INTEGER},
      </if>
      <if test="record.isDefault != null">
        is_default = #{record.isDefault,jdbcType=BIT},
      </if>
      <if test="record.updateUser != null">
        update_user = #{record.updateUser,jdbcType=VARCHAR},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.enable != null">
        enable = #{record.enable,jdbcType=BIT},
      </if>
      <if test="record.mockRequestParamType != null">
        mock_request_param_type = #{record.mockRequestParamType,jdbcType=INTEGER},
      </if>
      <if test="record.proxyUrl != null">
        proxy_url = #{record.proxyUrl,jdbcType=VARCHAR},
      </if>
      <if test="record.useMockScript != null">
        use_mock_script = #{record.useMockScript,jdbcType=BIT},
      </if>
      <if test="record.mockParams != null">
        mock_params = #{record.mockParams,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.mockData != null">
        mock_data = #{record.mockData,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.mockRule != null">
        mock_rule = #{record.mockRule,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.mockRequestRaw != null">
        mock_request_raw = #{record.mockRequestRaw,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.mockScript != null">
        mock_script = #{record.mockScript,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update api_mock_exp
    set id = #{record.id,jdbcType=INTEGER},
      mock_exp_name = #{record.mockExpName,jdbcType=VARCHAR},
      mock_data_type = #{record.mockDataType,jdbcType=INTEGER},
      params_md5 = #{record.paramsMd5,jdbcType=VARCHAR},
      api_id = #{record.apiId,jdbcType=INTEGER},
      is_default = #{record.isDefault,jdbcType=BIT},
      update_user = #{record.updateUser,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      enable = #{record.enable,jdbcType=BIT},
      mock_request_param_type = #{record.mockRequestParamType,jdbcType=INTEGER},
      proxy_url = #{record.proxyUrl,jdbcType=VARCHAR},
      use_mock_script = #{record.useMockScript,jdbcType=BIT},
      mock_params = #{record.mockParams,jdbcType=LONGVARCHAR},
      mock_data = #{record.mockData,jdbcType=LONGVARCHAR},
      mock_rule = #{record.mockRule,jdbcType=LONGVARCHAR},
      mock_request_raw = #{record.mockRequestRaw,jdbcType=LONGVARCHAR},
      mock_script = #{record.mockScript,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update api_mock_exp
    set id = #{record.id,jdbcType=INTEGER},
      mock_exp_name = #{record.mockExpName,jdbcType=VARCHAR},
      mock_data_type = #{record.mockDataType,jdbcType=INTEGER},
      params_md5 = #{record.paramsMd5,jdbcType=VARCHAR},
      api_id = #{record.apiId,jdbcType=INTEGER},
      is_default = #{record.isDefault,jdbcType=BIT},
      update_user = #{record.updateUser,jdbcType=VARCHAR},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      enable = #{record.enable,jdbcType=BIT},
      mock_request_param_type = #{record.mockRequestParamType,jdbcType=INTEGER},
      proxy_url = #{record.proxyUrl,jdbcType=VARCHAR},
      use_mock_script = #{record.useMockScript,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.xiaomi.miapi.pojo.ApiMockExpect">
    update api_mock_exp
    <set>
      <if test="mockExpName != null">
        mock_exp_name = #{mockExpName,jdbcType=VARCHAR},
      </if>
      <if test="mockDataType != null">
        mock_data_type = #{mockDataType,jdbcType=INTEGER},
      </if>
      <if test="paramsMd5 != null">
        params_md5 = #{paramsMd5,jdbcType=VARCHAR},
      </if>
      <if test="apiId != null">
        api_id = #{apiId,jdbcType=INTEGER},
      </if>
      <if test="isDefault != null">
        is_default = #{isDefault,jdbcType=BIT},
      </if>
      <if test="updateUser != null">
        update_user = #{updateUser,jdbcType=VARCHAR},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="enable != null">
        enable = #{enable,jdbcType=BIT},
      </if>
      <if test="mockRequestParamType != null">
        mock_request_param_type = #{mockRequestParamType,jdbcType=INTEGER},
      </if>
      <if test="proxyUrl != null">
        proxy_url = #{proxyUrl,jdbcType=VARCHAR},
      </if>
      <if test="useMockScript != null">
        use_mock_script = #{useMockScript,jdbcType=BIT},
      </if>
      <if test="mockParams != null">
        mock_params = #{mockParams,jdbcType=LONGVARCHAR},
      </if>
      <if test="mockData != null">
        mock_data = #{mockData,jdbcType=LONGVARCHAR},
      </if>
      <if test="mockRule != null">
        mock_rule = #{mockRule,jdbcType=LONGVARCHAR},
      </if>
      <if test="mockRequestRaw != null">
        mock_request_raw = #{mockRequestRaw,jdbcType=LONGVARCHAR},
      </if>
      <if test="mockScript != null">
        mock_script = #{mockScript,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.xiaomi.miapi.pojo.ApiMockExpect">
    update api_mock_exp
    set mock_exp_name = #{mockExpName,jdbcType=VARCHAR},
      mock_data_type = #{mockDataType,jdbcType=INTEGER},
      params_md5 = #{paramsMd5,jdbcType=VARCHAR},
      api_id = #{apiId,jdbcType=INTEGER},
      is_default = #{isDefault,jdbcType=BIT},
      update_user = #{updateUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      enable = #{enable,jdbcType=BIT},
      mock_request_param_type = #{mockRequestParamType,jdbcType=INTEGER},
      proxy_url = #{proxyUrl,jdbcType=VARCHAR},
      use_mock_script = #{useMockScript,jdbcType=BIT},
      mock_params = #{mockParams,jdbcType=LONGVARCHAR},
      mock_data = #{mockData,jdbcType=LONGVARCHAR},
      mock_rule = #{mockRule,jdbcType=LONGVARCHAR},
      mock_request_raw = #{mockRequestRaw,jdbcType=LONGVARCHAR},
      mock_script = #{mockScript,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xiaomi.miapi.pojo.ApiMockExpect">
    update api_mock_exp
    set mock_exp_name = #{mockExpName,jdbcType=VARCHAR},
      mock_data_type = #{mockDataType,jdbcType=INTEGER},
      params_md5 = #{paramsMd5,jdbcType=VARCHAR},
      api_id = #{apiId,jdbcType=INTEGER},
      is_default = #{isDefault,jdbcType=BIT},
      update_user = #{updateUser,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      enable = #{enable,jdbcType=BIT},
      mock_request_param_type = #{mockRequestParamType,jdbcType=INTEGER},
      proxy_url = #{proxyUrl,jdbcType=VARCHAR},
      use_mock_script = #{useMockScript,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="batchInsert" keyColumn="id" keyProperty="id" parameterType="map" useGeneratedKeys="true">
    insert into api_mock_exp
    (mock_exp_name, mock_data_type, params_md5, api_id, is_default, update_user, update_time, 
      enable, mock_request_param_type, proxy_url, use_mock_script, mock_params, mock_data, 
      mock_rule, mock_request_raw, mock_script)
    values
    <foreach collection="list" item="item" separator=",">
      (#{item.mockExpName,jdbcType=VARCHAR}, #{item.mockDataType,jdbcType=INTEGER}, #{item.paramsMd5,jdbcType=VARCHAR}, 
        #{item.apiId,jdbcType=INTEGER}, #{item.isDefault,jdbcType=BIT}, #{item.updateUser,jdbcType=VARCHAR}, 
        #{item.updateTime,jdbcType=TIMESTAMP}, #{item.enable,jdbcType=BIT}, #{item.mockRequestParamType,jdbcType=INTEGER}, 
        #{item.proxyUrl,jdbcType=VARCHAR}, #{item.useMockScript,jdbcType=BIT}, #{item.mockParams,jdbcType=LONGVARCHAR}, 
        #{item.mockData,jdbcType=LONGVARCHAR}, #{item.mockRule,jdbcType=LONGVARCHAR}, #{item.mockRequestRaw,jdbcType=LONGVARCHAR}, 
        #{item.mockScript,jdbcType=LONGVARCHAR})
    </foreach>
  </insert>
  <insert id="batchInsertSelective" keyColumn="id" keyProperty="list.id" parameterType="map" useGeneratedKeys="true">
    insert into api_mock_exp (
    <foreach collection="selective" item="column" separator=",">
      ${column.escapedColumnName}
    </foreach>
    )
    values
    <foreach collection="list" item="item" separator=",">
      (
      <foreach collection="selective" item="column" separator=",">
        <if test="'mock_exp_name'.toString() == column.value">
          #{item.mockExpName,jdbcType=VARCHAR}
        </if>
        <if test="'mock_data_type'.toString() == column.value">
          #{item.mockDataType,jdbcType=INTEGER}
        </if>
        <if test="'params_md5'.toString() == column.value">
          #{item.paramsMd5,jdbcType=VARCHAR}
        </if>
        <if test="'api_id'.toString() == column.value">
          #{item.apiId,jdbcType=INTEGER}
        </if>
        <if test="'is_default'.toString() == column.value">
          #{item.isDefault,jdbcType=BIT}
        </if>
        <if test="'update_user'.toString() == column.value">
          #{item.updateUser,jdbcType=VARCHAR}
        </if>
        <if test="'update_time'.toString() == column.value">
          #{item.updateTime,jdbcType=TIMESTAMP}
        </if>
        <if test="'enable'.toString() == column.value">
          #{item.enable,jdbcType=BIT}
        </if>
        <if test="'mock_request_param_type'.toString() == column.value">
          #{item.mockRequestParamType,jdbcType=INTEGER}
        </if>
        <if test="'proxy_url'.toString() == column.value">
          #{item.proxyUrl,jdbcType=VARCHAR}
        </if>
        <if test="'use_mock_script'.toString() == column.value">
          #{item.useMockScript,jdbcType=BIT}
        </if>
        <if test="'mock_params'.toString() == column.value">
          #{item.mockParams,jdbcType=LONGVARCHAR}
        </if>
        <if test="'mock_data'.toString() == column.value">
          #{item.mockData,jdbcType=LONGVARCHAR}
        </if>
        <if test="'mock_rule'.toString() == column.value">
          #{item.mockRule,jdbcType=LONGVARCHAR}
        </if>
        <if test="'mock_request_raw'.toString() == column.value">
          #{item.mockRequestRaw,jdbcType=LONGVARCHAR}
        </if>
        <if test="'mock_script'.toString() == column.value">
          #{item.mockScript,jdbcType=LONGVARCHAR}
        </if>
      </foreach>
      )
    </foreach>
  </insert>
</mapper>